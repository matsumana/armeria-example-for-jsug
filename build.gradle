buildscript {
    ext.v = { project.property("version.${it}") }

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${v('spring-boot')}"
        classpath "io.spring.gradle:dependency-management-plugin:${v('spring-dependency-management-gradle-plugin')}"
        classpath "com.google.protobuf:protobuf-gradle-plugin:${v('protobuf-gradle-plugin')}"
    }
}

subprojects {
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'

    group = 'com.example'
    version = '0.0.1-SNAPSHOT'

    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    repositories {
        mavenCentral()
    }

    dependencyManagement {
        imports {
            mavenBom "com.linecorp.armeria:armeria-bom:${v('armeria')}"
            mavenBom "org.springframework.boot:spring-boot-dependencies:${v('spring-boot')}"
            mavenBom "io.grpc:grpc-bom:${v('grpc')}"
        }
        dependencies {
            dependency "com.github.akarnokd:rxjava2-jdk8-interop:${v('rxjava2-jdk8-interop')}"
//            dependency "com.squareup.retrofit2:converter-jackson:${v('retrofit')}"
            dependency "com.squareup.retrofit2:converter-scalars:${v('retrofit')}"
        }
    }

    dependencies {
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
        testImplementation 'org.assertj:assertj-core'
    }

    test {
        useJUnitPlatform()
    }
}
